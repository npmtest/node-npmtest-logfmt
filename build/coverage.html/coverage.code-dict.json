{"/home/travis/build/npmtest/node-npmtest-logfmt/test.js":"/* istanbul instrument in package npmtest_logfmt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-logfmt/lib.npmtest_logfmt.js":"/* istanbul instrument in package npmtest_logfmt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_logfmt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_logfmt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-logfmt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-logfmt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_logfmt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_logfmt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_logfmt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_logfmt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_logfmt.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_logfmt.__dirname + '/lib.npmtest_logfmt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-logfmt/node_modules/logfmt/logfmt.js":"//constructor\nfunction logfmt() {\n}\nmodule.exports = logfmt;\n\nvar _                = require('lodash');\nvar streaming        = require('./lib/streaming');\nvar bodyParser       = require('./lib/body_parser');\nvar bodyParserStream = require('./lib/body_parser_stream');\nvar logfmtParser     = require('./lib/logfmt_parser');\nvar logger           = require('./lib/logger');\nvar requestLogger    = require('./lib/request_logger');\nvar serializer       = require('./lib/stringify');\n\n//Build up logfmt prototype\n_.extend(logfmt.prototype, logger);\n_.extend(logfmt.prototype, streaming);\n\nlogfmt.prototype.stringify = serializer.stringify;\nlogfmt.prototype.parse = logfmtParser.parse;\n\n// Synchronous body parser\nlogfmt.prototype.bodyParser = function(options) {\n  options || (options = {});\n  var mime = options.contentType || \"application/logplex-1\";\n  return bodyParser({ contentType: mime, parser: this.parse });\n};\n\n// Stream parser\nlogfmt.prototype.bodyParserStream = function(options) {\n  options || (options = {});\n  var mime = options.contentType || \"application/logplex-1\";\n  return bodyParserStream({ contentType: mime });\n};\n\nlogfmt.prototype.requestLogger = function(options, formatter) {\n  return requestLogger.init(this, options, formatter);\n};\n\nlogfmt.prototype.requestLogger.commonFormatter = requestLogger.commonFormatter;\n\n_.extend(logfmt, logfmt.prototype);\n","/home/travis/build/npmtest/node-npmtest-logfmt/node_modules/logfmt/lib/streaming.js":"var split       = require('split')\nvar through     = require('through');\nvar PassThrough = require('stream').PassThrough;\n\n//returns a stream that splits and parses logfmt into objects\nexports.streamParser = function(options){\n  var options = options || {};\n\n  var streamParser = new PassThrough();\n  var self = this;\n\n  var logfmtStream = through(function(line){\n    if(line !== '') this.queue(self.parse(line))\n  })\n\n  // When a source stream is piped to us, undo that pipe, and save\n  // off the source stream piped into our internally managed streams.\n  streamParser.on('pipe', function(source) {\n    if(source.unpipe) source.unpipe(this);\n    this.transformStream = source.pipe(split()).pipe(logfmtStream);\n  });\n\n  // When we're piped to another stream, instead pipe our internal\n  // transform stream to that destination.\n  streamParser.pipe = function(destination, options) {\n    return this.transformStream.pipe(destination, options);\n  };\n\n  return streamParser;\n}\n\n// returns a stream that stringifies objects\nexports.streamStringify = function(options){\n  var self = this;\n  var options = options || {};\n  if(options.hasOwnProperty('delimiter')){\n    var delim = options.delimiter;\n  }else{\n    var delim = \"\\n\";\n  }\n\n  return through(function(data){\n    this.queue(self.stringify(data) + delim)\n  }, function(){\n    this.queue(null)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-logfmt/node_modules/logfmt/lib/body_parser.js":"\n/*\nModule dependencies.\n*/\n\n/*\nJSON:\n\nParse logplex request bodies, providing the\nparsed object as `req.body`.\n\nOptions: none\n\n@param content_type {String} use when Content-Type matches this string\n@param parser {Function} parsing function takes String body and returns new body\n@return {Function}\n@api public\n*/\n\nexports = module.exports = function(options) {\n  var limit;\n  if (options == null) options = {};\n\n  return function(req, res, next) {\n    if (req._body) return next();\n    var is_mime = req.header('content-type') === options.contentType;\n    if (!is_mime) return next();\n    req._body = true;\n    req.body = req.body || {};\n    var buf;\n    buf = \"\";\n    req.setEncoding(\"utf8\");\n    req.on(\"data\", function(chunk) {\n      return buf += chunk;\n    });\n    req.on(\"end\", function() {\n      try {\n        var lines = []\n        buf.trim().split(\"\\n\").forEach(function(line){\n          lines.push(options.parser(line))\n        })\n        req.body = lines;\n      } catch (err) {\n        err.body = buf;\n        err.status = 400;\n        return next(err);\n      }\n      return next();\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-logfmt/node_modules/logfmt/lib/body_parser_stream.js":"var split = require('split');\nvar through = require('through');\nvar Readable = require('stream').Readable;\nvar PassThrough = require('stream').PassThrough;\nvar logfmt   = require('../logfmt');\n\nexports = module.exports = function(options){\n  if(options == null) options = {};\n  var mime = options.contentType || \"application/logplex-1\";\n\n  return function(req, res, next) {\n\n    //honor already parsed bodies\n    if (req._body) return next();\n\n    //mime-type check\n    var is_mime = req.header('content-type') === mime;\n    if (!is_mime) return next();\n    req._body = true;\n    req.body = new PassThrough({objectMode: true});\n    req.pipe(logfmt.streamParser()).pipe(req.body);\n\n    return next();\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-logfmt/node_modules/logfmt/lib/logfmt_parser.js":"exports.debug = false;\n\nexports.parse = function(line) {\n  var key = '';\n  var value = '';\n  var is_number = true;\n  var in_key    = false;\n  var in_value  = false;\n  var in_quote  = false;\n  var had_quote = false;\n  var object    = {};\n  var debug     = exports.debug;\n\n  if(line[line.length - 1] == '\\n'){\n    line = line.slice(0,line.length - 1)\n  }\n\n  for(var i=0; i <= line.length; i++){\n\n    if((line[i] == ' ' && !in_quote) || i == line.length){\n      if(in_key && key.length > 0){\n        object[key] = true;\n      }else if(in_value){\n        if(value == 'true') value = true;\n        else if(value == 'false') value = false;\n        else if(value === '' && !had_quote) value = null;\n        object[key] = value;\n        value = '';\n      }\n\n      if(i == line.length) break;\n      else {\n        in_key   = false;\n        in_value = false;\n        in_quote = false;\n        had_quote = false;\n      }\n    }\n\n    if(line[i] == '=' && !in_quote){\n      if(debug) console.log('split')\n      //split\n      in_key = false;\n      in_value = true;\n    }\n    else if(line[i] == '\\\\'){\n      i ++ ;\n      value += line[i];\n      if(debug) console.log('escape: ' + line[i])\n    }\n    else if(line[i] == '\"'){\n      had_quote = true;\n      in_quote = !in_quote;\n      if(debug) console.log('in quote: ' + in_quote)\n    }\n    else if(line[i] != ' ' && !in_value && !in_key){\n      if(debug) console.log('start key with: ' + line[i])\n      in_key = true;\n      key = line[i];\n    }\n    else if(in_key){\n      if(debug) console.log('add to key: ' + line[i])\n      key += line[i]\n    }\n    else if(in_value){\n      if(debug) console.log('add to value: ' + line[i])\n      value += line[i];\n    }\n  }\n\n  return object;\n}\n","/home/travis/build/npmtest/node-npmtest-logfmt/node_modules/logfmt/lib/logger.js":"var _ = require('lodash');\n\nexports.log = function(data, stream) {\n  this.stream = this.stream || process.stdout;\n  if(stream == undefined) stream = this.stream;\n\n  var logData = _.extend({}, this.defaultData, data);\n\n  if(this.timers){\n    for(var key in this.timers){\n      var now = (new Date()).getTime()\n      logData[key] = (now - this.timers[key]).toString() + 'ms' ;\n    }\n  }\n\n  stream.write(this.stringify(logData) + \"\\n\");\n}\n\nexports.time = function(label) {\n  var logfmt = require('../logfmt');\n  var startTime = (new Date()).getTime();\n  var label  = label || 'elapsed';\n  var timer  = new logfmt();\n  timer.stream = this.stream;\n  timer.defaultData = this.defaultData;\n  timer.timers = _.extend({}, this.timers)\n  timer.timers[label] = startTime;\n  return timer;\n}\n\nexports.namespace = function(object) {\n  var logfmt = require('../logfmt');\n  var namespaced = new logfmt()\n  var namespace  = _.extend({}, this.defaultData, object);\n  namespaced.stream = this.stream;\n  namespaced.defaultData = namespace\n  namespaced.timers = this.timers;\n  return namespaced;\n}\n\nexports.error = function(err, id) {\n  this.maxErrorLines = this.maxErrorLines || 10;\n  if (id === undefined) {\n    id = Math.random().toString().slice(2, 12);\n  }\n  var errorLogger = this.namespace({\n    error: true, \n    id:id, \n    now: (new Date()).toISOString()\n  })\n  errorLogger.log({ message:err.message });\n  if (err.stack) {\n    var stack = err.stack.split('\\n');\n    for (var line in stack) {\n      if (line >= this.maxErrorLines) break;\n      errorLogger.log({ line:line, trace:stack[line] });\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-logfmt/node_modules/logfmt/lib/request_logger.js":"var commonFormatter = function(req, res){\n  if((typeof req.path) == 'function'){\n    //in restify path is a function\n    var path = req.path();\n  }\n  else{\n    //in express it is an attribute\n    var path = req.originalUrl || req.path || req.url;\n  }\n\n  var httpHeader = req.header && req.header('x-forwarded-for')\n  var requestID  = req.header && req.header('x-request-id')\n\n  var ip = req.ip || httpHeader\n                  || req.connection.remoteAddress;\n\n  var requestData =  {\n    ip: ip,\n    time: (new Date()).toISOString(),\n    method: req.method,\n    path: path,\n    \"status\": res.statusCode,\n  }\n\n  if (requestID) {\n    requestData.request_id = requestID;\n  }\n\n  if(res.get){\n    requestData.content_length = res.get('content-length');\n    requestData.content_type = res.get('content-type');\n  }\n  return requestData;\n}\n\nvar immediateLogger = function(logger, options, formatter){\n  return function(req, res, next){\n    var data = formatter(req, res);\n    logger.log(data);\n    next();\n  }\n}\n\nvar timingLogger = function(logger, options, formatter){\n  return function(req, res, next){\n    var elapsed = options.elapsed || 'elapsed';\n    var timer   = logger.time(elapsed);\n    var end = res.end;\n    res.end = function(chunk, encoding) {\n      var data = formatter(req, res);\n      res.end = end;\n      res.end(chunk, encoding);\n      timer.log(data);\n    };\n    next();\n  }\n}\n\nexports.init = function(logger, options, formatter) {\n  this.logger = logger;\n\n  if(!formatter && !options){\n    formatter = commonFormatter;\n    options = {};\n  }\n  else if(!formatter){\n    if(typeof options == 'function'){\n      formatter = options;\n      options = {};\n    }else{\n      formatter = commonFormatter;\n    }\n  }\n  options = options || {};\n\n  if(options.immediate){\n    return immediateLogger(logger, options, formatter);\n  }else{\n    return timingLogger(logger, options, formatter);\n  }\n}\n\nexports.commonFormatter = commonFormatter;\n","/home/travis/build/npmtest/node-npmtest-logfmt/node_modules/logfmt/lib/stringify.js":"exports.stringify = function(data){\n  var line = '';\n\n  for(var key in data) {\n    var value = data[key];\n    var is_null = false;\n    if(value == null) {\n      is_null = true;\n      value = '';\n    }\n    else value = value.toString();\n\n    var needs_quoting  = value.indexOf(' ') > -1 || value.indexOf('=') > -1;\n    var needs_escaping = value.indexOf('\"') > -1 || value.indexOf(\"\\\\\") > -1;\n\n    if(needs_escaping) value = value.replace(/[\"\\\\]/g, '\\\\$&');\n    if(needs_quoting) value = '\"' + value + '\"';\n    if(value === '' && !is_null) value = '\"\"';\n\n    line += key + '=' + value + ' ';\n  }\n\n  //trim traling space\n  return line.substring(0,line.length-1);\n}\n\n"}